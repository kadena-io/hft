(begin-tx)
(env-data
  { 'ns-admin-keyset: []
  , 'ns-genesis-keyset:[]
  , 'ns-operate-keyset:[] })
(load "root/fungible-v2.pact")
(load "root/gas-payer-v1.pact")
(load "root/coin.pact")
(load "root/ns.pact")

(define-namespace 'kip (sig-keyset) (sig-keyset))

(load "kip/account-protocols-v1.pact")
(load "kip/manifest.pact")
(load "kip/poly-fungible-v2.pact")
(load "kip/token-policy-v1.pact")

(define-namespace 'util (sig-keyset) (sig-keyset))
(load "util/fungible-util.pact")
(commit-tx)

(begin-tx)
(env-data
 { 'marmalade-admin: ["marmalade-admin"]
 , 'marmalade-ns-user: ["marmalade-admin"]
 , 'marmalade-ns-admin: ["marmalade-admin"]
 , 'ns: "marmalade"
 , 'upgrade: false })
 (env-sigs [
   { 'key: 'marmalade-admin
    ,'caps: []
    }])
(load "ns-marmalade.pact")
(load "ledger.pact")
(load "policy.pact")
(typecheck "marmalade.ledger")
(commit-tx)

;; fungible test
(begin-tx)
(env-sigs [])
(load "test/ledger-test-fungible.pact")
(load "test/fungible.repl")
(use kip.token-manifest)
(env-data {'mint-guard: []
, 'burn-guard: []
, 'sale-guard: []
, 'transfer-guard: [] })
(marmalade.ledger.create-token
  TOKEN
  12
  (create-manifest (uri "text" "token") [])
  marmalade.guard-token-policy)
(test-capability (marmalade.ledger.CREDIT TOKEN FUNDER_ACCT))
(expect "fund success" true
  (test-fund FUNDER_ACCT FUNDER_GUARD FUNDER_BALANCE))
(commit-tx)

(fungible-v2-test.suite ledger-test-fungible
   fungible-test-helper-default "rotate-tests transfer-crosschain-tests")

;; enforce-ledger test
(begin-tx)

(env-data {
  "bob-guard": {"keys": ["bob"], "pred": "keys-all"}
  })

(module test-ledger G
  (defcap G () true)
  (use kip.token-manifest)
  (use kip.token-policy-v1 [token-info])

  (defun create-token
    ( id:string
      precision:integer
      manifest:object{manifest}
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-init
      { 'id: id, 'supply: 0.0, 'precision: precision, 'manifest: manifest })
  )

  (defun mint:string
    ( token:object{token-info}
      account:string
      guard:guard
      amount:decimal
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-mint token account guard amount)
  )

  (defun burn:string
    ( token:object{token-info}
      account:string
      amount:decimal
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-burn token account amount)
  )

  (defun offer
    ( token:object{token-info}
      seller:string
      amount:decimal
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-offer token seller amount "sale")
  )

  (defun buy
    ( token:object{token-info}
      seller:string
      buyer:string
      amount:decimal
      sale-id:string
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-buy token seller buyer amount sale-id)
  )

  (defun enforce-transfer-policy
    ( token:object{token-info}
      sender:string
      guard:guard
      receiver:string
      amount:decimal
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-transfer token sender guard receiver amount)
  )

  (defun transfer-crosschain
    ( token:object{token-info}
      sender:string
      guard:guard
      receiver:string
      amount:decimal
      policy:module{kip.token-policy-v1}
    )
    (policy::enforce-transfer token sender guard receiver amount)
  )
)

(expect-failure
  "enforce-init is called directly"
  "marmalade-admin"
  (marmalade.guard-token-policy.enforce-init {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])})
)

(expect-failure
  "enforce-init is called from an external ledger"
  "marmalade-admin"
  (create-token "project-0"
    12
    (create-manifest (uri "text" "project-0-uri") [])
    marmalade.guard-token-policy)
)

(expect-failure
  "enforce-mint is called from an external ledger"
  "marmalade-admin"
  (test-ledger.mint
  {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])
  }
  "bob" (read-keyset 'bob-guard) 5.0 marmalade.guard-token-policy))

(expect-failure
  "enforce-burn is called from an external ledger"
  "marmalade-admin"
  (test-ledger.burn
  {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])
  }
  "bob" 5.0 marmalade.guard-token-policy))

(expect-failure
  "enforce-offer is called from an external ledger"
  "marmalade-admin"
  (test-ledger.offer
  {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])
  }
  "bob" 5.0 marmalade.guard-token-policy ))

(expect-failure
  "enforce-buy is called from an external ledger"
  "marmalade-admin"
  (test-ledger.buy
  {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])
  }
  "bob" "alice" 5.0 "test-id" marmalade.guard-token-policy ))

(expect-failure
  "enforce-transfer is called from an external ledger"
  "marmalade-admin"
  (test-ledger.enforce-transfer-policy
  {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])
  }
  "bob" (read-keyset 'bob-guard) "alice" 5.0 marmalade.guard-token-policy ))

(expect-failure
  "enforce-crosschain is called from an external ledger"
  "marmalade-admin"
  (test-ledger.transfer-crosschain
  {
    "id": "project-0",
    "supply": 0.0,
    "precision": 12,
    "manifest": (create-manifest (uri "text" "project-0-uri") [])
  }
  "bob" (read-keyset 'bob-guard) "alice" 5.0 marmalade.guard-token-policy ))

(rollback-tx)

(begin-tx)
(env-data
 { 'bob-ks: ["bob"]
 , 'alice-ks: ["alice"]
 , 'mint-guard: ["mint"]
 , 'burn-guard: ["burn"]
 , 'sale-guard: ["sale"]
 , 'transfer-guard: ["transfer"]
 })
(env-keys ["bob"])
(use marmalade.ledger)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [
     (MINT "project-0" "bob" 5.0),
     (TRANSFER "project-0" "bob" "alice" 2.0),
     (TRANSFER "project-0" "bob" "project-0:1" 1.0),
     (TRANSFER "project-0:1" "bob" "alice"  0.000000002),
     (MINT "project-0:1" "bob" 1.0)
    ]
  },
  {
    'key: "project-0:1",
    'caps: [
     (MINT "project-0:1" "bob" 1.0)
    ]
  },
  {
    'key: "alice",
    'caps: [
      (TRANSFER "project-0:1" "alice" "project-0:1:1" 1.0)
      (MINT "project-0" "alice" 5.0)
    ]
  },
  { 'key: "mint", 'caps: [] },
  { 'key: "transfer", 'caps: [] }
  ])

(use kip.token-manifest)

(expect-failure
  "bob creates a new token project-0 before initialization"
  "Manifest is not valid"
  (create-token
    "project-0"
    12
    {"uri": (uri "text" "project-0-uri"),
     "hash": "wrong-hash",
     "data": []}
    marmalade.guard-token-policy)
  )

(expect
  "bob creates a new token project-0"
  "Write succeeded"
  (create-token
    "project-0"
    12
    (create-manifest (uri "text" "project-0-uri") [])
    marmalade.guard-token-policy)
  )

(expect
  "bob mints a 5.0 of token"
  "Write succeeded"
  (mint "project-0" "bob" (read-keyset 'bob-ks) 5.0))


(expect
  "total supply of project-0"
  5.0
  (total-supply "project-0"))

(expect "MINT events"
   [{"name": "marmalade.ledger.TOKEN","params": ["project-0"]}
   {"name": "marmalade.ledger.MINT","params": ["project-0" "bob" 5.0]}
   {"name": "marmalade.ledger.SUPPLY","params": ["project-0" 5.0]} ]
  (map (remove 'module-hash) (env-events true)))

;;regular transfer
(expect "Bob transfers 2.0 to Alice"
  "Write succeeded"
  (transfer-create "project-0" "bob" "alice" (read-keyset 'alice-ks) 2.0))

(expect "TRANSFER and CREATE-ACCOUNT event"
   [{"name": "marmalade.ledger.CREATE-ACCOUNT","params": ["project-0" "alice" (read-keyset "alice-ks")]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-0" "bob" "alice" 2.0]}
   ]
  (map (remove 'module-hash) (env-events true)))

(commit-tx)

(begin-tx)
(use marmalade.ledger)

(env-sigs [
  {
    'key: "alice",
    'caps: [
      (TRANSFER "project-0:1" "alice" "project-0:1:1" 1.0)
      (MINT "project-0" "alice" 5.0)
    ]
  }
  ])

(expect-failure
  "alice can't mint a project-0 token"
  "Keyset failure"
  (mint "project-0" "alice" (read-keyset 'alice-ks) 5.0))

(rollback-tx)

;;
;; BURN TODO
;;



;; ======================================================
;; test chainweb single-key naming protocol
;; ======================================================

(begin-tx)
(env-data
  {'k: ["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]
  ,'k2:
   {'keys:["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]
   ,'pred:"keys-any"}
  ,'k3:
   {'keys:["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4", "5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"]
   ,'pred:"keys-all"}
  })

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
      0.04),
    (marmalade.ledger.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.02),
    (marmalade.ledger.TRANSFER 'project-0 'bob
      "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.04)
      ]}
  ,{'key:'transfer,'caps:[]}
])

(length "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3")
(expect-failure
  "single-key mismatch, create-account"
  "Single-key account protocol violation"
  (marmalade.ledger.create-account 'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)))

(expect-failure
  "single-key mismatch, transfer-create"
  "Single-key account protocol violation"
  (marmalade.ledger.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)
    0.02))

(expect-failure
  "single-key mismatch, transfer-create"
  "Single-key account protocol violation"
  (marmalade.ledger.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k2 )
    0.02))

(expect-failure
  "multi-key, transfer-create"
  "Single-key account protocol violation"
  (marmalade.ledger.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k3 )
    0.02))

(expect-failure
  "bad protocol, transfer-create"
  "Unrecognized reserved protocol: c"
  (marmalade.ledger.transfer-create
    'project-0
    'bob
    "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k2)
    0.04))

(expect-failure
  "bad protocol, create-account"
  "Unrecognized reserved protocol: c"
  (marmalade.ledger.create-account 'project-0
    "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k2)))

(expect-failure
  "single-key mismatch, create-account"
  "Single-key account protocol violation"
  (marmalade.ledger.create-account
    'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)))

(expect
  "single-key success, create-account"
  "Write succeeded"
  (marmalade.ledger.create-account 'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k)))

(expect
  "Account is inserted to ledger with the key format id:account"
  {"account": "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
  ,"balance": 0.0
  ,"guard": (read-keyset 'k)
  ,"id": "project-0"}
  (marmalade.ledger.get-ledger-entry
    (marmalade.ledger.key 'project-0 "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4")))

(rollback-tx)

(begin-tx)

(env-data
  {'k: ["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]})
(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.02)]}
  ,{'key:'transfer,'caps: []}
  ])

(expect
  "single-key success, transfer-create"
  "Write succeeded"
  (marmalade.ledger.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k)
    0.02))

(expect
  "Account is inserted to ledger with the key format id:account"
  {"account": "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
  ,"balance": 0.02
  ,"guard": (read-keyset 'k)
  ,"id": "project-0"}
  (marmalade.ledger.get-ledger-entry
    (marmalade.ledger.key 'project-0 "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4")))


(expect "TRANSFER and CREATE-ACCOUNT events"
  [{"name": "marmalade.ledger.CREATE-ACCOUNT", "params": ["project-0" "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4" (read-keyset "k")]}
   {"name": "marmalade.ledger.TRANSFER", "params": ["project-0", "bob", "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4", 0.02]}
  ]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx)

;; Test ACCESSORS

(use marmalade.ledger)
(use kip.token-manifest)

(env-data
 { 'bob-ks: ["bob"],
   'alice-ks: ["alice"]
 })

(expect "Returns key"
  "project-0:bob"
  (key 'project-0 'bob))

(expect "Returns manifest"
  (create-manifest (uri "text" "project-0-uri") [])
  (get-manifest 'project-0))

(expect "Returns tokens"
  ["project-0","token"]
  (map (at 'id) (get-tokens)))

(expect "Returns token keys"
   ["project-0","token"]
  (get-token-keys))

(expect "Returns project-0 token"
  { 'id: "project-0"
  , 'manifest: (create-manifest (uri "text" "project-0-uri") [])
  , 'policy: marmalade.guard-token-policy
  , 'precision: 12
  , 'supply: 5.0
  }
  (get-token "project-0"))

(expect "Returns ledger keys"
  [ "project-0:alice"
    "project-0:bob"
    "token:FUNDER_ACCT"
  ]
  (get-ledger-keys))

(expect "get ledger entry"
  { 'account: "bob"
  , 'balance: 3.0
  , 'guard: (read-keyset 'bob-ks)
  , 'id: "project-0"
  }
  (get-ledger-entry (key 'project-0 'bob)))

(expect "get ledger"
 [ "alice" "bob" "FUNDER_ACCT" ]
 (map (at 'account) (get-ledger)))

(rollback-tx)

;;sales policy
(begin-tx "sale guard policy success")
(env-hash (hash "sale-tx1"))
(use marmalade.ledger)
(env-chain-data {"block-height": 100})
(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-0" "bob" 0.1 110)
     (marmalade.ledger.OFFER "project-0" "bob" 0.1 10)
     ]}
  ,{'key:'sale,'caps: [
    (marmalade.ledger.OFFER "project-0" "bob" 0.1 10)
    (marmalade.ledger.BUY "project-0" "bob" "buyer" 0.1 110 (hash "sale-tx1"))
    ]}
  ])

(env-data
 { 'buyer: "buyer",
   'buyer-guard: {"keys": ["buyer"], "pred": "="}
 })

(expect-failure "Offer fails due to small timeout"
  "invalid timeout"
  (sale 'project-0 'bob 0.1 10))

(expect-failure "Offer fails, sale guard not signed"
  "Keyset failure"
  (sale 'project-0 'bob 0.1 110))

(env-sigs
  [{'key:'sale,'caps: [
    (marmalade.ledger.OFFER "project-0" "bob" 0.1 110)
    ]}
  ])

(expect-failure "Offer fails, seller guard not signed"
  "Keyset failure"
  (sale 'project-0 'bob 0.1 110))

(env-sigs
  [{'key:'bob,'caps: [
    (marmalade.ledger.OFFER "project-0" "bob" 0.1 110)
    ]}
  ,{'key:'sale,'caps: [
     (marmalade.ledger.OFFER "project-0" "bob" 0.1 110)
   ]}
  ])

(expect "Offer succeeds"
  true
  (sale 'project-0 'bob 0.1 110))

(expect "Seller project-0 account debited sale amount"
  2.9
  (marmalade.ledger.get-balance 'project-0 'bob))

(expect "project-0 escrow account credited sale amount"
  0.1
  (marmalade.ledger.get-balance 'project-0 (sale-account)))

(expect "OFFER events"
  [{"name": "marmalade.ledger.OFFER","params": ["project-0" "bob" 0.1 110]}
   {"name": "marmalade.ledger.SALE","params": ["project-0" "bob" 0.1 110 (hash "sale-tx1")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["project-0" "bob" (sale-account) 0.1]}]
  (map (remove 'module-hash) (env-events true)))

(env-sigs
  [{'key:'dummy,'caps: [
     (marmalade.ledger.BUY "project-0" "bob" "buyer" 0.1 110 (pact-id))
   ]}])

(expect-failure "Buy fails, sale guard not signed"
 "Keyset failure"
 (continue-pact 1))

(env-sigs
 [{'key:'sale,'caps: [
    (marmalade.ledger.BUY "project-0" "bob" "buyer" 0.1 110 (pact-id))
  ]}])

(expect "Buy succeeds"
  true
  (continue-pact 1))

(expect "project-0 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-0 (sale-account)))

(expect "Buyer project-0 account credited sale amount"
  0.1
  (marmalade.ledger.get-balance 'project-0 'buyer))

(expect "BUY events"
  [{"name": "marmalade.ledger.BUY","params": ["project-0" "bob" "buyer" 0.1 110 (hash "sale-tx1")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["project-0" (sale-account) "buyer" 0.1]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx "sale guard policy timeout/withdraw")

(env-hash (hash "sale-tx2"))
(env-chain-data {"block-height": 100})
(use marmalade.ledger)
(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-0" "bob" 0.1 110)
     ]}
  ,{'key:'sale,'caps: [
    (marmalade.ledger.OFFER "project-0" "bob" 0.1 110)
    (marmalade.ledger.BUY "project-0" "bob" "buyer" 0.1 110 (hash "sale-tx2"))
    ]}
  ])

(env-data
 { 'buyer: "buyer",
   'buyer-guard: {"keys": ["buyer"], "pred": "="}
 })

(expect "Offer succeeds"
  true
  (sale 'project-0 'bob 0.1 110))

(expect "Seller project-0 account debited sale amount"
  2.9
  (marmalade.ledger.get-balance 'project-0 'bob))

(expect "project-0 escrow account credited sale amount"
  0.1
  (marmalade.ledger.get-balance 'project-0 (sale-account)))

(expect "OFFER events"
  [{"name": "marmalade.ledger.OFFER","params": ["project-0" "bob" 0.1 110]}
  {"name": "marmalade.ledger.SALE","params": ["project-0" "bob" 0.1 110 (hash "sale-tx2")]}
  {"name": "marmalade.ledger.TRANSFER","params": ["project-0" "bob" (sale-account) 0.1]}]
  (map (remove 'module-hash) (env-events true)))

(env-chain-data {"block-height": 111})

(expect-failure "Buy fails after timeout"
  "expired"
  (continue-pact 1))

(expect "Withdraw succeeds after timeout"
  true
  (continue-pact 0 true))

(expect "Seller project-0 account credited sale amount"
  3.0
  (marmalade.ledger.get-balance 'project-0 'bob))

(expect "project-0 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-0 (sale-account)))

(expect "WITHDRAW events"
  [{"name": "marmalade.ledger.WITHDRAW","params": ["project-0" "bob" 0.1 110 (hash "sale-tx2")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["project-0" (sale-account) "bob" 0.1]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx "sale fixed-quote-policy setup")
(env-hash (hash "fixed-quote-sale-tx2"))
(env-data {
   'upgrade: false
  ,'ns: "marmalade"
  ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
  ,'bob-guard: {"keys": ["bob"], "pred": "keys-all"}
  ,'max-supply: 10.0
  ,'min-amount: 1.0
  })
(env-sigs
  [{'key:'dummy
   ,'caps:
    [(marmalade.ledger.MINT "project-2" "bob" 1.0)
     ]}
   {'key: 'marmalade-admin
   ,'caps:[]}])

(load "fixed-quote-policy.pact")
(use kip.token-manifest)
(use marmalade.ledger)

(expect "Create token project-2"
  "Write succeeded"
  (create-token "project-2" 1
    (create-manifest (uri "text" "project-2-uri") []) marmalade.fixed-quote-policy))

(expect-failure "bob mints project-2"
  "Keyset failure"
  (mint 'project-2 "bob" (read-keyset 'bob-guard) 1.0))

(env-sigs
  [{'key:'mint
   ,'caps:
    [(marmalade.ledger.MINT "project-2" "bob" 1.0)
     ]}])

(expect "bob mints project-2"
  "Write succeeded"
  (mint 'project-2 "bob" (read-keyset 'bob-guard) 1.0))

(expect "Bob is credited"
  1.0
  (get-balance 'project-2 'bob))

(expect "Create and mint fqp token EVENTS"
  [ {"name": "marmalade.ledger.TOKEN","params": ["project-2"]}
    {"name": "marmalade.ledger.MINT","params": ["project-2" "bob" 1.0]}
    {"name": "marmalade.ledger.SUPPLY","params": ["project-2" 1.0]}]
    (map (remove 'module-hash) (env-events true)))

(commit-tx)

(begin-tx "sale fixed-quote-policy failure")
(env-hash (hash "fixed-quote-sale-tx2"))
(use marmalade.ledger)
(env-chain-data {"block-height": 100})
(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-2" "bob" 0.2 120)]}
 ])

(env-data
 {
  "quote": {
      "fungible": coin
     ,"price": 1.0
     ,"recipient": "alice"
     ,"recipient-guard": {"keys": ["alice"], "pred":"="}
   }
 })

(expect-failure
  "Sale fails with non-existent recipient account"
  "Failure: Tx Failed: with-read: row not found: alice"
  (sale 'project-2 'bob 0.2 120))

(env-data
  {
   "quote": {
       "fungible": coin
      ,"price": 1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["wrong-alice"], "pred":"="}
    }
  ,"alice": {"keys": ["alice"], "pred":"="}
 })
(coin.create-account 'alice (read-keyset 'alice))

(expect-failure
  "Sale fails with wrong recipient guard"
  "Failure: Tx Failed: Recipient guard does not match"
  (sale 'project-2 'bob 0.2 120))

(env-data
  {
   "quote": {
       "fungible": ns
      ,"price": 1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  })

(expect-failure
  "Sale fails with non-fungible in quote"
  "fungible: Failure: Type error: expected module{fungible-v2}, found module{}"
  (sale 'project-2 'bob 0.2 120))

(env-data
  {
   "quote": {
       "fungible": coin
      ,"price": -1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  })

(expect-failure
  "Sale fails with negative price in quote"
  "Offer price must be positive"
  (sale 'project-2 'bob 0.2 120))

(rollback-tx)

(begin-tx "sale fixed-quote-policy success")
(env-hash (hash "fixed-quote-sale-tx2"))
(use marmalade.ledger)

(env-data {"alice": {"keys": ["alice"], "pred":"="}})
(coin.create-account 'alice (read-keyset 'alice))

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-2" "bob" 0.2 120)]}
 ])

(env-data
  {
   "quote": {
       "fungible": coin
      ,"price": 1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })
(env-chain-data {"block-height": 100})

(test-capability (coin.COINBASE))
(coin.coinbase "coin-buyer" (read-msg 'buyer-guard) 2.0)

(expect "Sale succeeds"
  true
  (sale 'project-2 'bob 0.2 120))

(expect "Buyer coin balance remains unchanged"
  2.0
  (coin.get-balance 'coin-buyer))

(expect "Seller project-2 account debited sale amount"
  0.8
  (marmalade.ledger.get-balance 'project-2 'bob))

(expect "project-2 escrow account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-2 (sale-account)))

(expect "OFFER events"
   [{"name": "coin.TRANSFER","params": ["" "coin-buyer" 2.0]}
    {"name": "marmalade.ledger.OFFER","params": ["project-2" "bob" 0.2 120]}
    {"name": "marmalade.ledger.SALE","params": ["project-2" "bob" 0.2 120 (pact-id)]}
    {"name": "marmalade.fixed-quote-policy.QUOTE","params": [(pact-id) "project-2" 0.2 1.0 0.2 (read-msg "quote")]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-2" "bob" (sale-account) 0.2]}]
  (map (remove 'module-hash) (env-events true)))


(expect-failure "Withdraw fails before timeout"
  "still active"
  (continue-pact 0 true))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-2" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-sale-tx2"))]
  }
,{'key: 'dummy
 ,'caps: [
   (coin.TRANSFER "coin-buyer" "alice" 0.2)
 ]}])

(expect-failure "buy fails, buyer doesn't sign coin.TRANSFER"
  "Keyset failure"
  (continue-pact 1))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-2" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-sale-tx2"))]
  }
 ,{'key: 'buyer
 ,'caps: [
   (coin.TRANSFER "coin-buyer" "alice" 0.2)
 ]}])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "project-2 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-2 (sale-account)))

(expect "Buyer project-2 account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-2 'coin-buyer))

(expect "Buyer coin account debited sale price"
  1.8
  (coin.get-balance 'coin-buyer))

(expect "Seller coin account credited sale price"
  0.2
  (coin.get-balance 'alice))

(expect-failure "Withdraw fails after sale completes"
  (format "pact completed: {}" [(pact-id)])
  (continue-pact 0 true))

(expect "BUY events"
   [{"name": "marmalade.ledger.BUY","params": ["project-2" "bob" "coin-buyer" 0.2 120 (pact-id)]}
    {"name": "coin.TRANSFER","params": ["coin-buyer" "alice" 0.2]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-2" (sale-account) "coin-buyer" 0.2]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx "sale fixed-quote-policy timeout/withdraw")
(env-hash (hash "fixed-quote-sale-tx3"))
(use marmalade.ledger)

(env-data {"alice": {"keys": ["alice"], "pred":"="}})
(coin.create-account 'alice (read-keyset 'alice))

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-2" "bob" 0.2 120)
     (marmalade.ledger.BUY "project-2" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-sale-tx3"))
     ]}
   {'key: 'buyer
   ,'caps: [
     (coin.TRANSFER "coin-buyer" "alice" 1.0)
   ]}])

(env-data
  {
   "quote": {
       "fungible": coin
      ,"price": 1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })

(env-chain-data {"block-height": 100})

(test-capability (coin.COINBASE))
(coin.coinbase "coin-buyer" (read-msg 'buyer-guard) 2.0)

(expect "Sale succeeds"
  true
  (sale 'project-2 'bob 0.2 120))

(expect "Buyer coin balance remains unchanged"
  2.0
  (coin.get-balance 'coin-buyer))

(expect "Seller project-2 account debited sale amount"
  0.8
  (marmalade.ledger.get-balance 'project-2 'bob))

(expect "project-2 escrow account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-2 (sale-account)))

(expect "OFFER events"
   [{"name": "coin.TRANSFER","params": ["" "coin-buyer" 2.0]}
    {"name": "marmalade.ledger.OFFER","params": ["project-2" "bob" 0.2 120]}
    {"name": "marmalade.ledger.SALE","params": ["project-2" "bob" 0.2 120 (pact-id)]}
    {"name": "marmalade.fixed-quote-policy.QUOTE","params": [(pact-id) "project-2" 0.2 1.0 0.2 (read-msg "quote")]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-2" "bob" (sale-account) 0.2]}]
  (map (remove 'module-hash) (env-events true)))

(env-chain-data {"block-height": 121})

(expect-failure "buy fails after timeout"
  "expired"
  (continue-pact 1))

(expect "Withdraw succeeds after timeout"
  true
  (continue-pact 0 true))

(expect "Seller project-2 account credited sale amount"
  1.0
  (marmalade.ledger.get-balance 'project-2 'bob))

(expect "project-2 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-2 (sale-account)))

(expect "Buyer coin balance remains unchanged"
  2.0
  (coin.get-balance 'coin-buyer))

(expect "Seller coin balance remains unchanged"
  0.0
  (coin.get-balance 'alice))

(expect-failure "Withdraw fails after sale completes"
  (format "pact completed: {}" [(pact-id)])
  (continue-pact 0 true))

(expect "WITHDRAW events"
    [{"name": "marmalade.ledger.WITHDRAW","params": ["project-2" "bob" 0.2 120 (pact-id)]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-2" (sale-account) "bob" 0.2]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx "sale fixed-quote-royalty-policy setup")
(env-hash (hash "fixed-quote-sale-royalty-tx1"))
(env-data {
   'upgrade: false
  ,'ns: "marmalade"
  ,'creator: "creator"
  ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
  ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
  ,'bob-guard: {"keys": ["bob"], "pred": "keys-all"}
  ,'token_spec: {
    'fungible: coin
    ,'creator: "creator"
    ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
    ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
    ,'royalty-rate: 0.03
    ,'max-supply: -10.0
    ,'min-amount: 1.0
  }
  })
(env-sigs
  [{'key:'dummy
   ,'caps:
    [(marmalade.ledger.MINT "project-3" "bob" 1.0)
     ]},
   { 'key: 'marmalade-admin
    ,'caps:[]
     }
   ])

(coin.create-account "creator" (read-keyset 'creator-guard))

(load "fixed-quote-royalty-policy.pact")
(use kip.token-manifest)
(use marmalade.ledger)

(expect-failure "Create token project-3, negative max-supply"
  "Invalid max-supply"
  (create-token "project-3" 1
    (create-manifest (uri "text" "project-3-uri") []) marmalade.fixed-quote-royalty-policy))

(env-data {
   'upgrade: false
  ,'ns: "marmalade"
  ,'creator: "creator"
  ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
  ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
  ,'bob-guard: {"keys": ["bob"], "pred": "keys-all"}
  ,'token_spec: {
    'fungible: coin
    ,'creator: "creator"
    ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
    ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
    ,'royalty-rate: 0.03
    ,'max-supply: 10.0
    ,'min-amount: -1.0
  }
  })

(expect-failure "Create token project-3, negative min-amount"
  "Invalid min-amount"
  (create-token "project-3" 1
    (create-manifest (uri "text" "project-3-uri") []) marmalade.fixed-quote-royalty-policy))

(env-data {
   'upgrade: false
  ,'ns: "marmalade"
  ,'creator: "creator"
  ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
  ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
  ,'bob-guard: {"keys": ["bob"], "pred": "keys-all"}
  ,'token_spec: {
    'fungible: coin
    ,'creator: "creator"
    ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
    ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
    ,'royalty-rate: 0.03
    ,'max-supply: 10.0
    ,'min-amount: 1.0
  }
  })

(expect "Create token project-3 succeeds"
  "Write succeeded"
  (create-token "project-3" 1
    (create-manifest (uri "text" "project-3-uri") []) marmalade.fixed-quote-royalty-policy))

(expect-failure "mint project-3 to bob, invalid minter"
  "Keyset failure"
  (mint 'project-3 "bob" (read-keyset 'bob-guard) 1.0))

(env-sigs
  [{'key:'mint
   ,'caps:
    [(marmalade.ledger.MINT "project-3" "bob" 1.0)
     (marmalade.ledger.MINT "project-3" "bob" -1.0)
     ]}])

(expect-failure "mint project-3 to bob, invalid amount"
  "Amount must be positive"
  (mint 'project-3 "bob" (read-keyset 'bob-guard) -1.0))

(expect "mint project-3 to bob, success"
  "Write succeeded"
  (mint 'project-3 "bob" (read-keyset 'bob-guard) 1.0))

(expect "Bob is credited"
  1.0
  (get-balance 'project-3 'bob))

(expect "Create and mint fqp token EVENTS"
  [ {"name": "marmalade.ledger.TOKEN","params": ["project-3"]}
    {"name": "marmalade.ledger.MINT","params": ["project-3" "bob" 1.0]}
    {"name": "marmalade.ledger.SUPPLY","params": ["project-3" 1.0]}]
    (map (remove 'module-hash) (env-events true)))

(commit-tx)

(begin-tx "sale fixed-quote-royalty-policy success")
(env-hash (hash "fixed-quote-royalty-policy-sale-tx2"))
(use marmalade.ledger)

(env-data {"alice": {"keys": ["alice"], "pred":"="}})
(coin.create-account 'alice (read-keyset 'alice))

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-3" "bob" 0.2 120)]}
 ])

(env-data
  {
   "quote": {
       "price": 0.000000000001
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })
(env-chain-data {"block-height": 100})

(test-capability (coin.COINBASE))
(coin.coinbase "coin-buyer" (read-msg 'buyer-guard) 2.0)

(expect-failure
  "Transfer amount violates fungible precision"
  "Amount violates minimum precision: 0.0000000000002"
  (sale 'project-3 'bob 0.2 120))

(env-data
  {
   "quote": {
       "price": 0.01
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })

(expect "Sale succeeds"
  true
  (sale 'project-3 'bob 0.2 120))

(expect "Buyer coin balance remains unchanged"
  2.0
  (coin.get-balance 'coin-buyer))

(expect "Seller project-3 account debited sale amount"
  0.8
  (marmalade.ledger.get-balance 'project-3 'bob))

(expect "project-3 escrow account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-3 (sale-account)))

(expect "OFFER events"
   [{"name": "coin.TRANSFER","params": ["" "coin-buyer" 2.0]}
    {"name": "marmalade.ledger.OFFER","params": ["project-3" "bob" 0.2 120]}
    {"name": "marmalade.ledger.SALE","params": ["project-3" "bob" 0.2 120 (pact-id)]}
    {"name": "marmalade.fixed-quote-royalty-policy.QUOTE","params": [(pact-id) "project-3" 0.2 0.01 0.002 0.00006 "creator" (read-msg "quote")]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-3" "bob" (sale-account) 0.2]}]
  (map (remove 'module-hash) (env-events true)))


(expect-failure "Withdraw fails before timeout"
  "still active"
  (continue-pact 0 true))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-3" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-royalty-policy-sale-tx2"))]
  }
,{'key: 'dummy
 ,'caps: [
   (coin.TRANSFER "coin-buyer" "alice" 0.194)
   (coin.TRANSFER "coin-buyer" "creator" 0.006)
 ]}])

(expect-failure "buy fails, buyer doesn't sign coin.TRANSFER"
  "Keyset failure"
  (continue-pact 1))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-3" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-royalty-policy-sale-tx2"))]
  }
 ,{'key: 'buyer
 ,'caps: [
  (coin.TRANSFER "coin-buyer" "alice" 0.00194)
  (coin.TRANSFER "coin-buyer" "creator" 0.00006)
 ]}])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "project-3 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-3 (sale-account)))

(expect "Buyer project-3 account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-3 'coin-buyer))

(expect "Buyer coin account debited sale price"
  1.998
  (coin.get-balance 'coin-buyer))

(expect "Seller coin account credited sale price, minus 3% royalty payout"
  0.00194
  (coin.get-balance 'alice))

(expect "Creator coin account credited, 3% royalty payout"
  0.00006
  (coin.get-balance 'creator))

(expect-failure "Withdraw fails after sale completes"
  (format "pact completed: {}" [(pact-id)])
  (continue-pact 0 true))

(expect "BUY events"
   [{"name": "marmalade.ledger.BUY","params": ["project-3" "bob" "coin-buyer" 0.2 120 (pact-id)]}
    {"name": "coin.TRANSFER","params": ["coin-buyer" "creator" 0.00006]}
    {"name": "coin.TRANSFER","params": ["coin-buyer" "alice" 0.00194]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-3" (sale-account) "coin-buyer" 0.2]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx "sale fixed-quote-royalty-policy success, royalty payout floored to 0.0")
(env-hash (hash "fixed-quote-royalty-policy-sale-tx3"))
(use marmalade.ledger)

(env-data {"alice": {"keys": ["alice"], "pred":"="}})
(coin.create-account 'alice (read-keyset 'alice))

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-3" "bob" 0.2 120)]}
 ])

(env-data
  {
   "quote": {
       "price": 0.000000000001
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })
(env-chain-data {"block-height": 100})

(test-capability (coin.COINBASE))
(coin.coinbase "coin-buyer" (read-msg 'buyer-guard) 2.0)

(expect-failure
  "Transfer amount violates fungible precision"
  "Amount violates minimum precision: 0.0000000000002"
  (sale 'project-3 'bob 0.2 120))

(env-data
  {
   "quote": {
       "price": 0.00000000001
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })

(expect "Sale succeeds"
  true
  (sale 'project-3 'bob 0.2 120))

(expect "Buyer coin balance remains unchanged"
  2.0
  (coin.get-balance 'coin-buyer))

(expect "Seller project-3 account debited sale amount"
  0.8
  (marmalade.ledger.get-balance 'project-3 'bob))

(expect "project-3 escrow account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-3 (sale-account)))

(expect "OFFER events"
   [{"name": "coin.TRANSFER","params": ["" "coin-buyer" 2.0]}
    {"name": "marmalade.ledger.OFFER","params": ["project-3" "bob" 0.2 120]}
    {"name": "marmalade.ledger.SALE","params": ["project-3" "bob" 0.2 120 (pact-id)]}
    {"name": "marmalade.fixed-quote-royalty-policy.QUOTE","params": [(pact-id) "project-3" 0.2 0.00000000001 0.000000000002 0.0 "creator"(read-msg "quote")]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-3" "bob" (sale-account) 0.2]}]
  (map (remove 'module-hash) (env-events true)))


(expect-failure "Withdraw fails before timeout"
  "still active"
  (continue-pact 0 true))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-3" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-royalty-policy-sale-tx3"))]
  }
,{'key: 'dummy
 ,'caps: [
   (coin.TRANSFER "coin-buyer" "alice" 0.194)
   (coin.TRANSFER "coin-buyer" "creator" 0.006)
 ]}])

(expect-failure "buy fails, buyer doesn't sign coin.TRANSFER"
  "Keyset failure"
  (continue-pact 1))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-3" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-royalty-policy-sale-tx3"))]
  }
 ,{'key: 'buyer
 ,'caps: [
  (coin.TRANSFER "coin-buyer" "alice" 0.000000000002)
 ]}])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "project-3 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-3 (sale-account)))

(expect "Buyer project-3 account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-3 'coin-buyer))

(expect "Buyer coin account debited sale price"
  1.999999999998
  (coin.get-balance 'coin-buyer))

(expect "Seller coin account credited sale price, royalty payout floored to 0.0"
  0.000000000002
  (coin.get-balance 'alice))

(expect "Creator coin account not credited, royalty payout floored to 0.0"
  0.0
  (coin.get-balance 'creator))

(expect-failure "Withdraw fails after sale completes"
  (format "pact completed: {}" [(pact-id)])
  (continue-pact 0 true))

(expect "BUY events"
   [{"name": "marmalade.ledger.BUY","params": ["project-3" "bob" "coin-buyer" 0.2 120 (pact-id)]}
    {"name": "coin.TRANSFER","params": ["coin-buyer" "alice" 0.000000000002]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-3" (sale-account) "coin-buyer" 0.2]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx "sale fixed-quote-royalty-policy setup - with royalty rate 0.0")
(env-hash (hash "fixed-quote-sale-royalty-tx4"))
(env-data {
   'upgrade: false
  ,'ns: "marmalade"
  ,'creator: "creator"
  ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
  ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
  ,'bob-guard: {"keys": ["bob"], "pred": "keys-all"}
  ,'token_spec: {
    'fungible: coin
    ,'creator: "creator"
    ,'creator-guard: {"keys": ["creator"], "pred": "keys-all"}
    ,'mint-guard: {"keys": ["mint"], "pred": "keys-all"}
    ,'royalty-rate: 0.0
    ,'max-supply: 10.0
    ,'min-amount: 1.0
  }
  })
(env-sigs
  [{'key:'dummy
   ,'caps:
    [(marmalade.ledger.MINT "project-4" "bob" 1.0)
     ]},
   { 'key: 'marmalade-admin
    ,'caps:[]
     }
   ])

(use kip.token-manifest)
(use marmalade.ledger)

(expect "Create token project-4"
  "Write succeeded"
  (create-token "project-4" 1
    (create-manifest (uri "text" "project-4-uri") []) marmalade.fixed-quote-royalty-policy))

(expect-failure "mint project-4 to bob, invalid minter"
  "Keyset failure"
  (mint 'project-4 "bob" (read-keyset 'bob-guard) 1.0))

(env-sigs
  [{'key:'mint
   ,'caps:
    [(marmalade.ledger.MINT "project-4" "bob" 1.0)
     ]}])

(expect "mint project-4 to bob, success"
  "Write succeeded"
  (mint 'project-4 "bob" (read-keyset 'bob-guard) 1.0))

(expect "Bob is credited"
  1.0
  (get-balance 'project-4 'bob))

(expect "Create and mint fqp token EVENTS"
  [ {"name": "marmalade.ledger.TOKEN","params": ["project-4"]}
    {"name": "marmalade.ledger.MINT","params": ["project-4" "bob" 1.0]}
    {"name": "marmalade.ledger.SUPPLY","params": ["project-4" 1.0]}]
    (map (remove 'module-hash) (env-events true)))

(commit-tx)

(begin-tx "sale fixed-quote-royalty-policy success")
(env-hash (hash "fixed-quote-royalty-policy-sale-tx5"))
(use marmalade.ledger)

(env-data {"alice": {"keys": ["alice"], "pred":"="}})
(coin.create-account 'alice (read-keyset 'alice))

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-4" "bob" 0.2 120)]}
 ])

(env-data
  {
   "quote": {
       "price": -0.000000000001
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })
(env-chain-data {"block-height": 100})

(test-capability (coin.COINBASE))
(coin.coinbase "coin-buyer" (read-msg 'buyer-guard) 2.0)

(expect-failure
  "Offer price must be positive"
  (sale 'project-4 'bob 0.2 120))

(env-data
  {
   "quote": {
       "price": 0.000000000001
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-4" "bob" -0.2 120)]}
 ])

(expect-failure
  "Amount must be positive"
  (sale 'project-4 'bob -0.2 120))

(env-sigs
  [{'key:'bob
   ,'caps:
    [(marmalade.ledger.OFFER "project-4" "bob" 0.2 120)]}
 ])

(expect-failure
  "Transfer amount violates fungible precision"
  "Amount violates minimum precision: 0.0000000000002"
  (sale 'project-4 'bob 0.2 120))

(env-events true)
(env-data
  {
   "quote": {
       "price": 1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "coin-buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })

(expect "Sale succeeds"
  true
  (sale 'project-4 'bob 0.2 120))

(expect "Buyer coin balance remains unchanged"
  2.0
  (coin.get-balance 'coin-buyer))

(expect "Seller project-4 account debited sale amount"
  0.8
  (marmalade.ledger.get-balance 'project-4 'bob))

(expect "project-4 escrow account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-4 (sale-account)))

(expect "OFFER events"
   [{"name": "marmalade.ledger.OFFER","params": ["project-4" "bob" 0.2 120]}
    {"name": "marmalade.ledger.SALE","params": ["project-4" "bob" 0.2 120 (pact-id)]}
    {"name": "marmalade.fixed-quote-royalty-policy.QUOTE","params": [(pact-id) "project-4" 0.2 1.0 0.2 0.0 "creator" (read-msg "quote")]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-4" "bob" (sale-account) 0.2]}]
  (map (remove 'module-hash) (env-events true)))


(expect-failure "Withdraw fails before timeout"
  "still active"
  (continue-pact 0 true))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-4" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-royalty-policy-sale-tx5"))]
  }
,{'key: 'dummy
 ,'caps: [
   (coin.TRANSFER "coin-buyer" "alice" 0.194)
   (coin.TRANSFER "coin-buyer" "creator" 0.006)
 ]}])

(expect-failure "buy fails, buyer doesn't sign coin.TRANSFER"
  "Keyset failure"
  (continue-pact 1))

(env-sigs [
  {'key: 'bob
   ,'caps: [(marmalade.ledger.BUY "project-4" "bob" "coin-buyer" 0.2 120 (hash "fixed-quote-royalty-policy-sale-tx5"))]
  }
 ,{'key: 'buyer
 ,'caps: [
  (coin.TRANSFER "coin-buyer" "alice" 0.2)
 ]}])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "project-4 escrow account debited sale amount"
  0.0
  (marmalade.ledger.get-balance 'project-4 (sale-account)))

(expect "Buyer project-4 account credited sale amount"
  0.2
  (marmalade.ledger.get-balance 'project-4 'coin-buyer))

(expect "Buyer coin account debited sale price"
  1.8
  (coin.get-balance 'coin-buyer))

(expect "Seller coin account credited sale price minus 0% royalty"
  0.2
  (coin.get-balance 'alice))

(expect "Creator coin account credited 0% royalty"
  0.0
  (coin.get-balance 'creator))

(expect-failure "Withdraw fails after sale completes"
  (format "pact completed: {}" [(pact-id)])
  (continue-pact 0 true))

(expect "BUY events"
   [{"name": "marmalade.ledger.BUY","params": ["project-4" "bob" "coin-buyer" 0.2 120 (pact-id)]}
    {"name": "coin.TRANSFER","params": ["coin-buyer" "alice" 0.2]}
    {"name": "marmalade.ledger.TRANSFER","params": ["project-4" (sale-account) "coin-buyer" 0.2]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

;; Upgrade tests
(begin-tx "Upgrade contracts")
(env-sigs [
  { 'key: 'marmalade-admin
   ,'caps: []
   }])
(env-data {
  'ns: "marmalade"
 ,'upgrade: true
  })
(load "ledger.pact")
(load "fixed-quote-policy.pact")
(typecheck "marmalade.fixed-quote-policy")
(load "fixed-quote-royalty-policy.pact")
(typecheck "marmalade.fixed-quote-royalty-policy")
(load "policy.pact")
(typecheck "marmalade.guard-token-policy")
(rollback-tx)
