(begin-tx)
  (env-data
    { 'ns-admin-keyset: []
    , 'ns-genesis-keyset:[]
    , 'ns-operate-keyset:[] })
  (load "../root/fungible-v2.pact")
  (load "../root/fungible-xchain-v1.pact")
  (load "../root/gas-payer-v1.pact")
  (env-exec-config ["DisablePact44"])
  (load "../root/ns.pact")
  (define-namespace 'kip (sig-keyset) (sig-keyset))

  (load "../kip/account-protocols-v1.pact")
  (env-data
  { 'marmalade-admin: ["marmalade-admin"]
  , 'marmalade-ns-user: ["marmalade-admin"]
  , 'marmalade-ns-admin: ["marmalade-admin"]
  , 'ns: "marmalade"
  , 'upgrade: false })

  (load "../kip/manifest.pact")
  (load "../kip/token-policy-v1.pact")
  (load "../kip/token-policy-v2.pact")
  (load "../kip/poly-fungible-v2.pact")
  (load "../kip/poly-fungible-v3.pact")
  (define-namespace 'util (sig-keyset) (sig-keyset))
  (load "../util/fungible-util.pact")
(commit-tx)

(begin-tx)
  (env-data
   { 'marmalade-admin: ["marmalade-admin"]
   , 'marmalade-ns-user: ["marmalade-admin"]
   , 'marmalade-ns-admin: ["marmalade-admin"]
   , 'ns: "marmalade"
   , 'upgrade: false })
   (env-sigs [
     { 'key: 'marmalade-admin
      ,'caps: []
      }])
  (load "../ns-marmalade.pact")
  (env-data
   { 'marmalade-admin: ["marmalade-admin"]
   , 'marmalade-ns-user: ["marmalade-admin"]
   , 'marmalade-ns-admin: ["marmalade-admin"]
   , 'ns: "marmalade"
   , 'upgrade: false })

  (load "../concrete-policies/fungible-quote-policy/fungible-quote-policy-interface-v1.pact")
  (load "../policy-manager/policy-manager.pact")
  (load "../ledger.pact")
  (load "../marmalade-util/util-v1.pact")
  (load "../test/abc.pact")
(commit-tx)

(begin-tx "load concrete-polices")
  (load "../concrete-policies/fungible-quote-policy/fungible-quote-policy-v1.pact")
  (load "../concrete-policies/non-fungible-policy/non-fungible-policy-v1.pact")
  (load "../concrete-policies/royalty-policy/royalty-policy-v1.pact")
  (load "../concrete-policies/collection-policy/collection-policy-v1.pact")
  (load "../concrete-policies/guard-policy/guard-policy-v1.pact")

  (use marmalade.policy-manager [QUOTE_POLICY NON_FUNGIBLE_POLICY ROYALTY_POLICY COLLECTION_POLICY GUARD_POLICY])
  (marmalade.policy-manager.init {
     "ledger-guard": (marmalade.ledger.ledger-guard)
    ,"ledger": marmalade.ledger
  })
  (marmalade.policy-manager.add-concrete-policy QUOTE_POLICY marmalade.fungible-quote-policy-v1)
  (marmalade.policy-manager.add-concrete-policy NON_FUNGIBLE_POLICY marmalade.non-fungible-policy-v1)
  (marmalade.policy-manager.add-concrete-policy ROYALTY_POLICY marmalade.royalty-policy-v1)
  (marmalade.policy-manager.add-concrete-policy COLLECTION_POLICY marmalade.collection-policy-v1)
  (marmalade.policy-manager.add-concrete-policy GUARD_POLICY marmalade.guard-policy-v1)

(commit-tx)

(begin-tx "load regular polices")
  (load "../policies/fixed-issuance-policy/fixed-issuance-policy-v1.pact")
  (load "../policies/onchain-manifest-policy/onchain-manifest-policy-v1.pact")
  (load "../policies/migration-policy/migration-policy-v1.pact")

(commit-tx)

(begin-tx)

(use marmalade.ledger)
(use marmalade.policy-manager)
(use marmalade.util-v1)

(env-data {
  "default-token-id": (create-token-id { 'uri: "test-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } )
 ,"reserved-token-id": (create-token-id { 'uri: "marmalade-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } )
 ,"empty-token-id": (create-token-id { 'uri: "test-uri-1", 'precision: 0, 'policies: (create-policies EMPTY) } )
 ,"wrong-token-protocol-id": "t:wrong"
 ,"wrong-token-id": "wrong"
 ,"account": "k:account"
 ,"mint-guard": {"keys": ["account"], "pred": "keys-all"}
  })

(env-sigs [
  { 'key: 'account
   ,'caps: [(marmalade.ledger.MINT (read-msg "default-token-id") "k:account" 1.0)
            (marmalade.ledger.MINT (read-msg 'empty-token-id) "k:account" 1.0)
   ]
   }])

(expect-failure "create a token with uri starting with marmalade fails"
  "Reserved protocol: marmalade"
  (create-token (read-msg 'reserved-token-id) 0 "marmalade-uri" (create-policies DEFAULT) ))

(expect-failure "create a token with unmatching token-id"
  "Token protocol violation"
  (create-token (read-msg 'wrong-token-protocol-id) 0 "test-uri" (create-policies DEFAULT) ))

(expect-failure "create a token without token protocol"
  "Unrecognized reserved protocol"
  (create-token (read-msg 'wrong-token-id) 0 "test-uri" (create-policies DEFAULT) ))

(expect "create a default token with quote-policy, non-fungible-policy"
  true
  (create-token (read-msg 'default-token-id) 0 "test-uri" (create-policies DEFAULT) ))

(expect "create a token with no concrete-policy"
  true
  (create-token (read-msg 'empty-token-id) 0 "test-uri-1" (create-policies EMPTY) ))

(expect "mint a default token with quote-policy, non-fungible-policy"
  true
  (mint (read-msg 'default-token-id )  (read-msg 'account ) (read-keyset 'mint-guard ) 1.0))

(expect "mint an empty token with no policy"
  true
  (mint (read-msg 'empty-token-id )  (read-msg 'account ) (read-keyset 'mint-guard ) 1.0))

(env-sigs [
  { 'key: 'marmalade-admin
   ,'caps: []
   }])

(commit-tx)


(begin-tx)
(env-sigs [
  { 'key: 'marmalade-admin
   ,'caps: []
   }])
(env-data {
  "ns": "marmalade"
  })
  (namespace (read-msg 'ns))
  (use marmalade.ledger)
  (use marmalade.util-v1)
  (env-data {
    'token-id: (create-token-id { 'uri: "test-uri-3", 'precision: 0, 'policies: (create-policies DEFAULT)  } )
    })

  (expect  "create a token "
    true
    (create-token (read-msg 'token-id ) 0 "test-uri-3"  (create-policies DEFAULT)  ))

  (module non-fungible-policy-v1 GOVERNANCE

    @doc "Concrete policy for issuing an nft with a fixed supply of 1"

    (defcap GOVERNANCE ()
      (enforce-guard (keyset-ref-guard 'marmalade-admin )))

    (implements kip.token-policy-v2)
    (use kip.token-policy-v2 [token-info])

    (defun enforce-ledger:bool ()
       (enforce-guard (marmalade.ledger.ledger-guard))
    )

    (defun enforce-init:bool
      ( token:object{token-info}
      )
      (enforce-ledger)
      true
    )

    (defun enforce-mint:bool
      ( token:object{token-info}
        account:string
        guard:guard
        amount:decimal
      )
      (enforce-ledger)
    )

    (defun enforce-burn:bool
      ( token:object{token-info}
        account:string
        amount:decimal
      )
      (enforce-ledger)
    )

    (defun enforce-offer:bool
      ( token:object{token-info}
        seller:string
        amount:decimal
        sale-id:string
      )
      @doc "Capture quote spec for SALE of TOKEN from message"
      (enforce-ledger)
    )

    (defun enforce-buy:bool
      ( token:object{token-info}
        seller:string
        buyer:string
        buyer-guard:guard
        amount:decimal
        sale-id:string )
      (enforce-ledger)
    )

    (defun enforce-transfer:bool
      ( token:object{token-info}
        sender:string
        guard:guard
        receiver:string
        amount:decimal )
      (enforce-ledger)
    )

    (defun enforce-withdraw:bool
      ( token:object{token-info}
        seller:string
        amount:decimal
        sale-id:string )
      (enforce-ledger)
    )
  )

  (use marmalade.policy-manager)
  (use marmalade.policy-manager [NON_FUNGIBLE_POLICY])

  (expect "upgrade non-fungible-policy"
    true
    (update-concrete-policy NON_FUNGIBLE_POLICY marmalade.non-fungible-policy-v1))

  (expect "check if stored policy matches with saved concrete-policy"
    true
    (is-used (at 'policies (get-token-info (read-msg 'token-id))) NON_FUNGIBLE_POLICY))

(rollback-tx)

(begin-tx "start an offer")
  (env-hash (hash "offer-0"))
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.util-v1)
  (env-data {
    "seller-guard": {"keys": ["account"], "pred": "keys-all"}
  })
  (marmalade.abc.create-account "k:account" (read-keyset 'seller-guard))

  (env-data {
    "token-id": (create-token-id { 'uri: "test-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } )
   ,"quote": {
    "fungible": marmalade.abc
    ,"price": 2.0
    ,"amount": 1.0
    ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}}
    })

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})
  (env-sigs [
    { 'key: 'account
    ,'caps: [
    (marmalade.ledger.OFFER (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z") )]
    }])

  (expect "stat offer by running step 0 of sale"
    true
    (sale (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z")))

  (env-data { "seller-guard": {"keys": ["account"], "pred": "keys-all"}
            , "token-id" : (create-token-id { 'uri: "test-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } )
}
  )

  (expect "events"
    (format "{}" [[
      {"name": "marmalade.ledger.OFFER","params": [(read-msg 'token-id) "k:account" 1.0 "2023-07-22T11:26:35Z"]}
      {"name": "marmalade.ledger.SALE","params": [(read-msg 'token-id) "k:account" 1.0 "2023-07-22T11:26:35Z" "C1vw1eMf_DZV3oZjyinRIKrQV2rPMBMh3lydeduo8yg"]}
      {"name": "marmalade.fungible-quote-policy-v1.QUOTE","params": ["C1vw1eMf_DZV3oZjyinRIKrQV2rPMBMh3lydeduo8yg" (read-msg 'token-id) 1.0 2.0 2.0 {"amount": 1.0,"fungible": marmalade.abc,"price": 2.0,"seller-guard": (read-keyset 'seller-guard )}]}
      {"name": "marmalade.ledger.ACCOUNT_GUARD","params": [(read-msg 'token-id) "c:kojW5oDBdlmFg0jVWz_mdj1DxlL8OgeH-1OILa1YzzE" (create-capability-pact-guard (SALE_PRIVATE "C1vw1eMf_DZV3oZjyinRIKrQV2rPMBMh3lydeduo8yg"))]}
      {"name": "marmalade.ledger.TRANSFER","params": [(read-msg 'token-id) "k:account" "c:kojW5oDBdlmFg0jVWz_mdj1DxlL8OgeH-1OILa1YzzE" 1.0]}
      {"name": "marmalade.ledger.RECONCILE","params": [(read-msg 'token-id) 1.0 {"account": "k:account","current": 0.0,"previous": 1.0} {"account": "c:kojW5oDBdlmFg0jVWz_mdj1DxlL8OgeH-1OILa1YzzE","current": 1.0,"previous": 0.0}]}]])
    (format "{}" [(map (remove "module-hash")  (env-events true))])
  )

  (env-data {
    "buyer": "k:buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "keys-all"}
  ,"market-guard": {"keys": ["market"], "pred": "keys-all"}
  ,"marketplace-fee": {
    "marketplace-account":"k:market"
    ,"mk-fee-percentage": 0.05
    }})

  (marmalade.abc.create-account "k:buyer" (read-keyset 'buyer-guard))
  (marmalade.abc.fund "k:buyer" 2.0)
  (marmalade.abc.create-account "k:market" (read-keyset 'market-guard))
  (env-sigs
  [{'key:'buyer
    ,'caps: [
      (BUY (create-token-id { 'uri: "test-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } ) "k:account" "k:buyer" 1.0 (time "2023-07-22T11:26:35Z") "C1vw1eMf_DZV3oZjyinRIKrQV2rPMBMh3lydeduo8yg")
      (marmalade.abc.TRANSFER "k:buyer" "c:A2ZV26b7mo4xXNBvkwvG8jeeLPyKUc3mGDrjo9rv9WI" 2.0)

    ]}])

  (env-hash (hash "offer-0"))

  (expect "Buy succeeds"
    true
    (continue-pact 1))

  (env-data {
    "buyer-guard": {"keys": ["buyer"], "pred": "keys-all"}})

(rollback-tx)

(begin-tx "Accept bid and payout royalties")
  (use marmalade.ledger)
  (use marmalade.policy-manager)
  (use marmalade.util-v1)

  (env-hash (hash "accept-offer-with-royalties"))

  (env-data {
    "seller-guard": {"keys": ["account"], "pred": "keys-all"},
    "creator-guard": {"keys": ["creator"], "pred": "keys-all"}
  })
  (marmalade.abc.create-account "k:account" (read-keyset 'seller-guard))
  (marmalade.abc.create-account "k:creator" (read-keyset 'creator-guard))

  (env-data {
    "token-id": (create-token-id {
      'uri: "test-quote-royalty-uri",
      'precision: 0,
      'policies: (create-policies {
        'quote-policy: true
        ,'non-fungible-policy: false
        ,'royalty-policy: true
        ,'collection-policy: false
        ,'guard-policy: false
      })
    }),
    "quote": {
      "fungible": marmalade.abc
      ,"price": 10.0
      ,"amount": 1.0
      ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}
    },
    "royalty_spec": {
      "fungible": marmalade.abc
      ,"creator": "k:creator"
      ,"creator-guard":  {"keys": ["creator"], "pred": "keys-all"}
      ,"royalty-rate": 0.05
    },
    "seller-guard": {"keys": ["account"], "pred": "keys-all"}
  })

  (expect "create a token with quote-policy and royalty-policy"
    true
    (create-token (read-msg 'token-id) 0 "test-quote-royalty-uri" (create-policies {
      'quote-policy: true
      ,'non-fungible-policy: false
      ,'royalty-policy: true
      ,'collection-policy: false
      ,'guard-policy: false
    })))

  (env-sigs [
    { 'key: 'seller
    ,'caps: [
    (marmalade.ledger.MINT (read-msg 'token-id) "k:account" 1.0)]
  }])

  (expect "mint 1.0 amount "
     true
     (mint (read-msg 'token-id) "k:account" (read-keyset 'seller-guard ) 1.0))

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})
  (env-sigs [
    { 'key: 'account
    ,'caps: [
    (marmalade.ledger.OFFER (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z") )]
    }])

  (expect "Start offer succeeds"
    true
    (sale (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z")))

  (env-data {
    "token-id": (create-token-id {
      'uri: "test-quote-royalty-uri",
      'precision: 0,
      'policies: (create-policies {
        'quote-policy: true
        ,'non-fungible-policy: false
        ,'royalty-policy: true
        ,'collection-policy: false
        ,'guard-policy: false
      })
    })
    ,"sale-id": "4OsyAnzjiE0phoCAJ3tZ_bRR2OH3TXk7gP5Cobq4E8o"
    ,"bidder-guard": {"keys": ["bidder"], "pred": "keys-all"}
    ,"bid-id": (marmalade.fungible-quote-policy-v1.get-bid-id "4OsyAnzjiE0phoCAJ3tZ_bRR2OH3TXk7gP5Cobq4E8o" "k:bidder")
  })

  (marmalade.abc.create-account "k:bidder" (read-keyset 'bidder-guard))
  (marmalade.abc.fund "k:bidder" 25.0)

  (env-sigs
  [{'key:'bidder
    ,'caps: [
       (marmalade.abc.TRANSFER "k:bidder" "c:o3Z6_-VcmBlRuOM-KuTEdIBiivHJGxQCnBVH_7qhdB0" 5.0)
    ]}])

  (expect "Place Bid succeeds"
    true
    (marmalade.fungible-quote-policy-v1.place-bid (read-msg 'token-id) "k:bidder" (read-keyset 'bidder-guard) 1.0 5.0 (read-msg 'sale-id))
  )

  (expect "Buyer account has 20.0 tokens left"
    20.0
    (marmalade.abc.get-balance "k:bidder"))

  (env-data {
    "token-id": (create-token-id {
      'uri: "test-quote-royalty-uri",
      'precision: 0,
      'policies: (create-policies {
        'quote-policy: true
        ,'non-fungible-policy: false
        ,'royalty-policy: true
        ,'collection-policy: false
        ,'guard-policy: false
      })
    })
    ,"sale-id": "4OsyAnzjiE0phoCAJ3tZ_bRR2OH3TXk7gP5Cobq4E8o"
    ,"buyer": "k:bidder"
    ,"buyer-guard": {"keys": ["bidder"], "pred": "keys-all"}
    ,"market-guard": {"keys": ["market"], "pred": "keys-all"}
    ,"marketplace-fee": {
      "marketplace-account":""
      ,"mk-fee-percentage": 0.0
    }
    ,"bid-id": (marmalade.fungible-quote-policy-v1.get-bid-id "4OsyAnzjiE0phoCAJ3tZ_bRR2OH3TXk7gP5Cobq4E8o" "k:bidder")
  })

  (env-sigs [
    { 'key: 'bidder
    ,'caps: [
        (BUY (read-msg 'token-id) "k:account" "k:bidder"  1.0 (time  "2023-07-22T11:26:35Z") (read-msg 'sale-id))
        (marmalade.abc.TRANSFER "k:bidder" "c:OUabb7V15zMKQhdm_XqOpVIi8SjsvRRhGSgL5zkCWQ8" 5.0)
      ]
    },
    { 'key: 'account
    ,'caps: [
      (marmalade.fungible-quote-policy-v1.SELLER (read-msg 'sale-id))
      ]
    }])

  (expect "Accept bid and continue buy succeeds"
      true
      (continue-pact 1 false (read-msg 'sale-id)))

  (expect "Seller account has increased with 5 tokens minus royalty fees"
    4.75
    (marmalade.abc.get-balance "k:account"))

  (expect "Creator account has received royalties"
      0.25
      (marmalade.abc.get-balance "k:creator"))

(rollback-tx)
