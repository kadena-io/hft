;;load policy manager, ledger, and all concrete policies
(load "../../policy-manager/policy-manager.repl")
(env-exec-config [])
(begin-tx "Create a fungible token")
(use marmalade.policy-manager [QUOTE_POLICY NON_FUNGIBLE_POLICY ROYALTY_POLICY COLLECTION_POLICY])
(use marmalade.util-v1 [concrete-policy-bool])

(module util GOV
  (defcap GOV () true)

  (defconst QUOTE_ONLY:object{concrete-policy-bool}
    { 'quote-policy: true
     ,'non-fungible-policy: false
     ,'royalty-policy: false
     ,'collection-policy:false
     ,'guard-policy: true
    }
  )

)
(commit-tx)

(begin-tx)
(use marmalade.ledger)
(use marmalade.util-v1)
(env-exec-config ["DisablePact44"])
(env-data {
   "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
  ,"account": "k:account"
  ,"mint-guard": {"keys": ["account"], "pred": "keys-all"}
})

(expect "create a default token with quote-policy, non-fungible-policy"
  true
  (create-token (read-msg 'token-id) 0 "test-quote-only-uri" (create-policies util.QUOTE_ONLY)))

(env-sigs [
  { 'key: 'random
  ,'caps: [(marmalade.ledger.MINT (read-msg 'token-id ) "k:account" 2.0)]
  }])

(env-data {
  "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
 ,"account": "k:account"
 ,"account-guard": {"keys": ["account"], "pred": "keys-all"}
})

(expect-failure "mint 2.0 amount of quote-only tokens with random key"
  "Keyset failure"
  (mint (read-msg 'token-id )  (read-msg 'account ) (read-keyset 'account-guard ) 2.0))

(commit-tx)

(begin-tx "mint for the second time")
  (use marmalade.ledger)
  (use marmalade.util-v1)

  (env-data {
    "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
  ,"account-guard": {"keys": ["account"], "pred": "keys-all"}
  ,"account": "k:account"
  })

  (env-sigs [
    { 'key: 'any-key
    ,'caps: [(marmalade.ledger.MINT (read-msg 'token-id ) "k:account" 2.0)]
    }])

  (expect-failure "mint 2.0 amount of quote-only tokens with random key"
    "Keyset failure"
    (mint (read-msg 'token-id )  (read-msg 'account ) (read-keyset 'account-guard ) 2.0))

  (env-sigs [
    { 'key: 'account
    ,'caps: [(marmalade.ledger.MINT (read-msg 'token-id ) "k:account" 2.0)]
    }])

  (expect "mint 2.0 amount of quote-only tokens with mint-guard key"
    true
    (mint (read-msg 'token-id )  (read-msg 'account ) (read-keyset 'account-guard ) 2.0))


  (expect "total supply of the token is 4.0"
    2.0
    (total-supply (read-msg 'token-id )))

(commit-tx)

(begin-tx "start offer fails")

  (env-hash (hash "offer-quote-only-0"))
  (use marmalade.ledger)
  (use marmalade.util-v1)

  (env-data {
    "seller-guard": {"keys": ["account"], "pred": "keys-all"}
  })

  (env-data {
    "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
  , "quote": {
      "fungible": marmalade.abc
      ,"price": 2.0
      ,"amount": 1.0
      ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}}
    })

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})
  (env-sigs [
    { 'key: 'account-wrong
    ,'caps: [
    (marmalade.ledger.OFFER (read-msg 'token-id ) "k:account" 1.0 (time "2023-07-22T11:26:35Z") )]
    }])

  (expect-failure "offer fails because of keyset failure"
    "Keyset failure (keys-all): [account]"
    (sale (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z")))
(rollback-tx)


(begin-tx "Buy succeeds with marketplace fees")

  (env-hash (hash "offer-quote-only-1"))
  (use marmalade.ledger)
  (use marmalade.util-v1)
  (env-data {
    "seller-guard": {"keys": ["account"], "pred": "keys-all"}
  })
  (marmalade.abc.create-account "k:account" (read-keyset 'seller-guard))
  (marmalade.abc.fund "k:account" 2.0)

  (env-data {
    "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
  ,"quote": {
    "fungible": marmalade.abc
    ,"price": 2.0
    ,"amount": 1.0
    ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}}
    })

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})
  (env-sigs [
    { 'key: 'account
    ,'caps: [
    (marmalade.ledger.OFFER (read-msg 'token-id ) "k:account" 1.0 (time "2023-07-22T11:26:35Z") )]
    }])

  (expect "Start offer succeeds"
    true
    (sale (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z")))

  (env-data {
    "buyer": "k:buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "keys-all"}
  ,"market-guard": {"keys": ["market"], "pred": "keys-all"}
  ,"marketplace-fee": {
    "marketplace-account":"k:market"
    ,"mk-fee-percentage": 0.05
    }})

  (marmalade.abc.create-account "k:buyer" (read-keyset 'buyer-guard))
  (marmalade.abc.create-account "k:market" (read-keyset 'market-guard))
  (marmalade.abc.fund "k:buyer" 2.0)

  (env-sigs
  [{'key:'buyer
    ,'caps: [
      (BUY (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} ) "k:account" "k:buyer"  1.0 (time  "2023-07-22T11:26:35Z") "v86vqj0OkIZQfD3XGETjij1sLjJH7Q6GZBZJeytDsEo")
      (marmalade.abc.TRANSFER "k:buyer" "c:cbnfX-2IcN_in1gOZpdheAlkbERuqFIUNOYE8egBx38" 2.0)
    ]}])

  (env-hash (hash "offer-royalty-0"))

  (expect "Buy succeeds"
    true
    (continue-pact 1))

  (expect "Buyer account has 0.0 tokens left"
    0.0
    (marmalade.abc.get-balance "k:buyer"))

  (expect "Seller account has 3.9 tokens"
    3.9
    (marmalade.abc.get-balance "k:account"))

  (expect "Marketplace fee account has 2.1 tokens"
    0.1
    (marmalade.abc.get-balance "k:market"))

(rollback-tx)

(begin-tx "Buy succeeds without marketplace fees")

  (env-hash (hash "offer-quote-only-1"))
  (use marmalade.ledger)
  (use marmalade.util-v1)
  (env-data {
    "seller-guard": {"keys": ["account"], "pred": "keys-all"}
  })
  (marmalade.abc.create-account "k:account" (read-keyset 'seller-guard))

  (env-data {
    "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
  ,"quote": {
    "fungible": marmalade.abc
    ,"price": 2.0
    ,"amount": 1.0
    ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}}
    })

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})
  (env-sigs [
    { 'key: 'account
    ,'caps: [
    (marmalade.ledger.OFFER (read-msg 'token-id ) "k:account" 1.0 (time "2023-07-22T11:26:35Z") )]
    }])

  (expect "Start offer succeeds"
    true
    (sale (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z")))

  (env-data {
    "buyer": "k:buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "keys-all"}
  ,"market-guard": {"keys": ["market"], "pred": "keys-all"}
  ,"marketplace-fee": {"marketplace-account": "", "mk-fee-percentage": 0.0 }
  })

  (marmalade.abc.create-account "k:buyer" (read-keyset 'buyer-guard))
  (marmalade.abc.create-account "k:market" (read-keyset 'market-guard))
  (marmalade.abc.fund "k:buyer" 2.0)

  (env-sigs
  [{'key:'buyer
    ,'caps: [
      (BUY (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} ) "k:account" "k:buyer"  1.0 (time  "2023-07-22T11:26:35Z") "v86vqj0OkIZQfD3XGETjij1sLjJH7Q6GZBZJeytDsEo")
      (marmalade.abc.TRANSFER "k:buyer" "c:cbnfX-2IcN_in1gOZpdheAlkbERuqFIUNOYE8egBx38" 2.0)
    ]}])

  (env-hash (hash "offer-royalty-0"))

  (expect "Buy succeeds"
    true
    (continue-pact 1))

  (expect "Buyer account has 0.0 tokens left"
    0.0
    (marmalade.abc.get-balance "k:buyer"))

  (expect "Seller account has 2.0 tokens"
    2.0
    (marmalade.abc.get-balance "k:account"))

  (expect "Marketplace fee account has 0 tokens"
    0.0
    (marmalade.abc.get-balance "k:market"))
(rollback-tx)

(begin-tx "Sell token and place bid")

  (env-hash (hash "offer-bidding-1"))
  (use marmalade.ledger)
  (use marmalade.util-v1)
  (env-data {
    "seller-guard": {"keys": ["account"], "pred": "keys-all"}
  })
  (marmalade.abc.create-account "k:account" (read-keyset 'seller-guard))

  (env-data {
    "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
  ,"quote": {
    "fungible": marmalade.abc
    ,"price": 10.0
    ,"amount": 1.0
    ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}}
    })

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})
  (env-sigs [
    { 'key: 'account
    ,'caps: [
    (marmalade.ledger.OFFER (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z") )]
    }])

  (expect "Start offer succeeds"
    true
    (sale (read-msg 'token-id) "k:account" 1.0 (time "2023-07-22T11:26:35Z")))

  (env-data {
    "token-id": (create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} )
    ,"sale-id": "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8"
    ,"bidder-guard": {"keys": ["bidder"], "pred": "keys-all"}
  })

  (marmalade.abc.create-account "k:bidder" (read-keyset 'bidder-guard))
  (marmalade.abc.fund "k:bidder" 25.0)

  (env-sigs
  [{'key:'bidder
    ,'caps: [
       (marmalade.abc.TRANSFER "k:bidder" "c:xm9OAtNJtczDgymM7tkdmVoya2gz8jq0hHhjZo0b2lw" 5.0)
    ]}])

  (expect "Place Bid succeeds"
    true
    (marmalade.fungible-quote-policy-v1.place-bid (read-msg 'token-id) "k:bidder" (read-keyset 'bidder-guard) 1.0 5.0 (read-msg 'sale-id))
  )

  (expect "Buyer account has 20.0 tokens left"
    20.0
    (marmalade.abc.get-balance "k:bidder"))
(commit-tx)

(begin-tx "Withdraw bid")

  (env-hash (hash "withdraw-bidding-1"))
  (use marmalade.fungible-quote-policy-v1)

  (env-data {
    "bid-id": (get-bid-id "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8" "k:bidder")
    ,"sale-id": "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8"
    ,"bidder-guard": {"keys": ["bidder"], "pred": "keys-all"}
  })

  (env-sigs
  [{'key:'bidder
    ,'caps: [
      (BUYER (read-msg 'bid-id))
    ]}])

  (expect "Withdraw Bid succeeds"
    true
    (withdraw-bid (read-msg 'bid-id) (read-msg 'sale-id))
  )

  (expect "Buyer account has 25.0 tokens"
    25.0
    (marmalade.abc.get-balance "k:bidder"))
(rollback-tx)

(begin-tx "Accept bid and finish sale")

  (env-hash (hash "accept-bidding-1"))
  (use marmalade.fungible-quote-policy-v1)
  (use marmalade.util-v1)
  (env-sigs [
    { 'key: 'seller
    ,'caps: [
      (SELLER (read-msg 'sale-id))
    ]
    }])

  (env-data {
    "buyer": "k:bidder"
    ,"buyer-guard": {"keys": ["bidder"], "pred": "keys-all"}
    ,"market-guard": {"keys": ["market"], "pred": "keys-all"}
    ,"marketplace-fee": {
    "marketplace-account":""
    ,"mk-fee-percentage": 0.0
    }
    ,"bid-id": (get-bid-id "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8" "k:bidder")
    ,"sale-id": "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8"
  })

  (env-sigs [
    { 'key: 'bidder
    ,'caps: [
      (marmalade.ledger.BUY (marmalade.ledger.create-token-id { 'uri: "test-quote-only-uri", 'precision: 0, 'policies: (create-policies util.QUOTE_ONLY)} ) "k:account" "k:bidder"  1.0 (time  "2023-07-22T11:26:35Z") "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8")
      ]
    },
    { 'key: 'account
    ,'caps: [
      (SELLER (read-msg 'sale-id))
    ]
    }])

  (expect "Accepting bid & buy succeeds"
      true
      (continue-pact 1 false "FRVsiHGeVPQNZEpnJ8MrF6_fpB0o2tj-xztJRHQe_m8"))

  (expect "Seller account has increased with 5 tokens"
    5.0
    (marmalade.abc.get-balance "k:account"))
(commit-tx)
