(begin-tx)
(env-exec-config ['DisablePact44] )
(env-data
  { 'ns-admin-keyset: []
  , 'ns-genesis-keyset:[]
  , 'ns-operate-keyset:[] })
(load "root/fungible-v2.pact")
(load "root/gas-payer-v1.pact")
(load "root/coin.pact")
(load "root/ns.pact")
(define-namespace 'kip (sig-keyset) (sig-keyset))

(load "kip/account-protocols-v1.pact")
(load "kip/manifest.pact")
(load "kip/token-policy-v1.pact")
(load "kip/poly-fungible-v2.pact")

(define-namespace 'util (sig-keyset) (sig-keyset))
(load "util/fungible-util.pact")
(commit-tx)

(begin-tx)
(env-data
 { 'marmalade-admin: ["marmalade-admin"]
 , 'marmalade-ns-user: ["marmalade-admin"]
 , 'marmalade-ns-admin: ["marmalade-admin"]
 , 'ns: "marmalade"
 , 'upgrade: false })
 (env-sigs [
   { 'key: 'marmalade-admin
    ,'caps: []
    }])

(load "ns-marmalade.pact")

(commit-tx)

(begin-tx)
(env-exec-config [] )
(load "ledger.pact")
(load "simple-one-off-collection-policy.pact")
(typecheck "marmalade.ledger" true)
(commit-tx)


(begin-tx "init collection")

(use marmalade.ledger)

(use kip.token-manifest)
(use marmalade.simple-1-off-whitelist-collection-policy)

(env-data {
  'buyer-0: ["buyer-0"], 'buyer-1: ["buyer-1"], 'buyer-2: ["buyer-2"], 'buyer-3: ["buyer-3"], 'buyer-4: ["buyer-4"], 'operator: ['operator]
  })

(expect  "initiates collection-0 bid"
  true
  (let*
    ( (stringify-index (lambda (index:integer) (format "{}" [index])))
      (get-manifest (lambda (index:integer)
        (create-manifest (uri "text" (stringify-index index)) [])
        ))
      (manifests:list (map get-manifest (enumerate 0 4)))
      (hashes:list (map (at 'hash ) manifests))
      (tokens:list (map (token-id) hashes))
      (tokens-hash:string (hash tokens)))
      (init-collection "collection-0" 5 tokens-hash coin 5.0 "operator" (read-keyset 'operator))
      )
  )

(expect "INIT_COLLECTION events"
  [{ "name": "marmalade.simple-1-off-whitelist-collection-policy.INIT_COLLECTION"
    ,"params": ["collection-0" 5 coin 5.0 "operator"]}]
  (map (remove 'module-hash )(env-events true))
)

(test-capability (coin.COINBASE))
(expect "fund buyers"
   ["Write succeeded" "Write succeeded" "Write succeeded" "Write succeeded" "Write succeeded"]
  (let*
    ((buyer (lambda (index:integer) (format "buyer-{}" [index])))
     (buyers (map buyer (enumerate 0 4)))
     (fund (lambda (account:string) (coin.coinbase account (read-keyset account ) 5.0) ))
     )
     (map fund buyers))
)

(expect "COINBASE events"
  [ {"name": "coin.TRANSFER","params": ["" "buyer-0" 5.0]}
    {"name": "coin.TRANSFER","params": ["" "buyer-1" 5.0]}
    {"name": "coin.TRANSFER","params": ["" "buyer-2" 5.0]}
    {"name": "coin.TRANSFER","params": ["" "buyer-3" 5.0]}
    {"name": "coin.TRANSFER","params": ["" "buyer-4" 5.0]}]
  (map (remove 'module-hash )(env-events true))
)

(expect "create operator account"
   "Write succeeded"
   (coin.create-account 'operator (read-keyset 'operator))
)

(env-sigs
   [{ 'key: "buyer-0" ,'caps: [(coin.TRANSFER "buyer-0" "operator" 5.0)] }
    { 'key: "buyer-1" ,'caps: [(coin.TRANSFER "buyer-1" "operator" 5.0)] }
    { 'key: "buyer-2" ,'caps: [(coin.TRANSFER "buyer-2" "operator" 5.0)] }
    { 'key: "buyer-3" ,'caps: [(coin.TRANSFER "buyer-3" "operator" 5.0)] }
])

(expect  "4 buyers buy whitelist from collection-0"
  [true true true true]
  (let*
    ((buyer (lambda (index:integer) (format "buyer-{}" [index])))
     (buyers (map buyer (enumerate 0 3))))
    buyers
   (map (reserve-whitelist "collection-0") buyers)
  ))

(expect "RESERVE_SALE events"
  [ {"name": "coin.TRANSFER","params": ["buyer-0" "operator" 5.0]}
    {"name": "marmalade.simple-1-off-whitelist-collection-policy.RESERVE_SALE","params": ["collection-0" "buyer-0" 0]}
    {"name": "coin.TRANSFER","params": ["buyer-1" "operator" 5.0]}
    {"name": "marmalade.simple-1-off-whitelist-collection-policy.RESERVE_SALE","params": ["collection-0" "buyer-1" 1]}
    {"name": "coin.TRANSFER","params": ["buyer-2" "operator" 5.0]}
    {"name": "marmalade.simple-1-off-whitelist-collection-policy.RESERVE_SALE","params": ["collection-0" "buyer-2" 2]}
    {"name": "coin.TRANSFER","params": ["buyer-3" "operator" 5.0]}
    {"name": "marmalade.simple-1-off-whitelist-collection-policy.RESERVE_SALE","params": ["collection-0" "buyer-3" 3]}]
  (map (remove 'module-hash )(env-events true))
)

(env-sigs
   [{ 'key: "operator" ,'caps: [(marmalade.simple-1-off-whitelist-collection-policy.OPERATOR "collection-0")] }
])

(expect-failure "Clear the bid fails - whitelist is not fully sold"
  "bid is in the process"
  (let*
    ( (stringify-index (lambda (index:integer) (format "{}" [index])))
      (get-manifest (lambda (index:integer)
        (create-manifest (uri "text" (stringify-index index)) [])
        ))
      (manifests:list (map get-manifest (enumerate 0 4)))
      (hashes:list (map (at 'hash ) manifests))
      (tokens:list (map (token-id) hashes)) )
      (reveal-tokens "collection-0" tokens)
      ))

(env-sigs
   [{ 'key: "buyer-4" ,'caps: [(coin.TRANSFER "buyer-4" "operator" 5.0)] }
])

(env-chain-data
  {'block-height: 20987})

(expect "last whitelist slot is sold"
  true
  (reserve-whitelist "collection-0" "buyer-4"))

(expect "RESERVE_SALE events"
  [ {"name": "coin.TRANSFER","params": ["buyer-4" "operator" 5.0]}
    {"name": "marmalade.simple-1-off-whitelist-collection-policy.RESERVE_SALE","params": ["collection-0" "buyer-4" 4]} ]
  (map (remove 'module-hash )(env-events true))
)

(env-sigs
   [{ 'key: "operator" ,'caps: [(marmalade.simple-1-off-whitelist-collection-policy.OPERATOR "collection-0")] }
])

(expect "Clear the bid succeeds"
  true
  (let*
    ( (stringify-index (lambda (index:integer) (format "{}" [index])))
      (get-manifest (lambda (index:integer)
        (create-manifest (uri "text" (stringify-index index)) [])
        ))
      (manifests:list (map get-manifest (enumerate 0 4)))
      (hashes:list (map (at 'hash ) manifests))
      (tokens:list (map (token-id) hashes)) )
      (reveal-tokens "collection-0" tokens)
))

(expect "REVEAL_TOKEN events"
  [{"name": "marmalade.simple-1-off-whitelist-collection-policy.REVEAL_TOKENS",
    "params": ["collection-0"
                ["t:fgnk8jnlTvB8iToPf2ACNpy8BInAj5OTXvzELgAKvRc"
                 "t:A431JP6Z0MZ3b6-bYuD3PgNDjCLa_BwhUW1jvHu9tkQ"
                 "t:9mCeDcVIuQET1awDEWbYXF-HlRzhLv5VW3hXiW9m678"
                 "t:fqfxqkkMwG4FuyttGzosh_JpLOD-LUzt_D8K_5UhFg8"
                 "t:kTKLjmYoR9AOyv8KXcgNGOy8PGeF3cRwmYAofLdMa4w"]]}]
  (map (remove 'module-hash )(env-events true))
)

(commit-tx)

(begin-tx "create-token")
(use kip.token-manifest)
(use marmalade.ledger)
(use marmalade.simple-1-off-whitelist-collection-policy)

(env-data {
 'collection-id: "collection-0"
  })

(env-sigs [
  { 'key: 'operator
   ,'caps: [(OPERATOR "collection-0")]
  }])

(expect "create t:9mCeDcVIuQET1awDEWbYXF-HlRzhLv5VW3hXiW9m678"
  true
  (marmalade.ledger.create-token
    (token-id (at 'hash (create-manifest (uri "text" "2") [])))
    0
    (create-manifest (uri "text" "2") [])
    marmalade.simple-1-off-whitelist-collection-policy)
)

(expect "create t:A431JP6Z0MZ3b6-bYuD3PgNDjCLa_BwhUW1jvHu9tkQ"
  true
  (marmalade.ledger.create-token
    (token-id (at 'hash (create-manifest (uri "text" "1") [])))
    0
    (create-manifest (uri "text" "1") [])
    marmalade.simple-1-off-whitelist-collection-policy)
)

(expect-failure "create token with invalid manifest hash fails"
  "Invalid token-id"
  (marmalade.ledger.create-token
    "t:9mCeDcVIuQET1awDEWbYXF-HlRzhLv5VW3hXiW9m678"
    0
    (create-manifest (uri "text" "3") [])
    marmalade.simple-1-off-whitelist-collection-policy)
)

(commit-tx)

(begin-tx "mint-token")
(use kip.token-manifest)
(use marmalade.ledger)
(use marmalade.simple-1-off-whitelist-collection-policy)

(env-data {
    'buyer-0: ['buyer-0 ]
   ,'buyer-index : 0
})

(env-sigs [
  { 'key: 'operator
   ,'caps: [(marmalade.ledger.MINT "t:9mCeDcVIuQET1awDEWbYXF-HlRzhLv5VW3hXiW9m678" "buyer-0" 1.0)]
    }])
(env-chain-data
  {'block-height: 20987})

(marmalade.ledger.mint
  "t:9mCeDcVIuQET1awDEWbYXF-HlRzhLv5VW3hXiW9m678"
  'buyer-0
  (read-keyset 'buyer-0)
  1.0)


(env-data {
    'buyer-2: ['buyer-2 ]
   ,'buyer-index : 2
})

(env-sigs [
  { 'key: 'operator
   ,'caps: [(marmalade.ledger.MINT "t:A431JP6Z0MZ3b6-bYuD3PgNDjCLa_BwhUW1jvHu9tkQ" "buyer-2" 1.0)]
    }])

(expect-failure "mint token with non-whitelisted account"
  "Account is not whitelisted for the token"
  (marmalade.ledger.mint
    "t:A431JP6Z0MZ3b6-bYuD3PgNDjCLa_BwhUW1jvHu9tkQ"
    'buyer-2
    (read-keyset 'buyer-2)
    1.0)
)


(rollback-tx)



;; Principal

;; revealing token-id (before create-token) can allow people to reserve that token id using a different policy.
